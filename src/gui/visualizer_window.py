from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QSplitter, QPushButton, QLabel, QGraphicsView,
                             QTextEdit, QFileDialog, QMessageBox)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QColor, QPainter
from PyQt6.Qsci import QsciScintilla, QsciLexerPython, QsciAPIs
from src.executor.code_executor import CodeExecutor
from src.visualizer.pythontutor_widgets import PythonTutorScene
from PyQt6.QtSvg import QSvgGenerator
from PyQt6.QtGui import QPainter, QPixmap
from PyQt6.QtCore import QRectF, QSize
import json
import os
import sys
import io
import contextlib
from typing import List, Dict, Any
import traceback


class TestCase:
    def __init__(self, inputs: List[str], expected_output: str, description: str = ""):
        self.inputs = inputs
        self.expected_output = expected_output.strip()
        self.description = description


class TestRunner:
    def __init__(self):
        self.max_execution_time = 5  # —Å–µ–∫—É–Ω–¥

    def run_tests(self, code: str, test_cases: List[TestCase]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥ –ø—Ä–æ—Ç–∏–≤ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        results = {
            'passed': 0,
            'total': len(test_cases),
            'test_results': [],
            'success': False,
            'error': None
        }

        for i, test_case in enumerate(test_cases):
            try:
                result = self._run_single_test(code, test_case, i + 1)
                results['test_results'].append(result)
                if result['passed']:
                    results['passed'] += 1
            except Exception as e:
                results['test_results'].append({
                    'test_number': i + 1,
                    'passed': False,
                    'error': str(e),
                    'description': test_case.description
                })

        results['success'] = results['passed'] == results['total']
        return results

    def _run_single_test(self, code: str, test_case: TestCase, test_number: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è input()
        input_iterator = iter(test_case.inputs)

        def mock_input(prompt=""):
            try:
                value = next(input_iterator)
                return value
            except StopIteration:
                raise EOFError("No more input available")

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout
        captured_output = io.StringIO()

        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        safe_globals = {
            '__builtins__': {
                'print': lambda *args, **kwargs: print(*args, file=captured_output, **kwargs),
                'input': mock_input,
                'len': len,
                'range': range,
                'int': int,
                'float': float,
                'str': str,
                'list': list,
                'dict': dict,
                'set': set,
                'tuple': tuple,
                'bool': bool,
                'abs': abs,
                'max': max,
                'min': min,
                'sum': sum,
                'sorted': sorted,
                'reversed': reversed,
                'enumerate': enumerate,
                'zip': zip,
                'map': map,
                'filter': filter,
            }
        }

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            exec(code, safe_globals)

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
            actual_output = captured_output.getvalue().strip()

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            passed = actual_output == test_case.expected_output

            return {
                'test_number': test_number,
                'passed': passed,
                'input': test_case.inputs,
                'expected_output': test_case.expected_output,
                'actual_output': actual_output,
                'description': test_case.description,
                'error': None
            }

        except Exception as e:
            return {
                'test_number': test_number,
                'passed': False,
                'input': test_case.inputs,
                'expected_output': test_case.expected_output,
                'actual_output': captured_output.getvalue().strip(),
                'description': test_case.description,
                'error': str(e)
            }


class VisualizerWindow(QWidget):
    """–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞"""

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.executor = CodeExecutor()
        self.current_step_number = -1
        self.visualization_scene = PythonTutorScene()

        # –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_runner = TestRunner()
        self.current_task_tests = []

        self.init_ui()

    def init_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(10, 10, 10, 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –¥–≤–µ –ø–∞–Ω–µ–ª–∏)
        self.create_work_area(main_layout)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel(main_layout)

        self.setLayout(main_layout)

    def create_header(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        header_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"
        back_btn = QPushButton("‚Üê –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
        back_btn.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 8px 15px;
                font-size: 14px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        back_btn.clicked.connect(self.back_to_menu)
        header_layout.addWidget(back_btn)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞")
        title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        title.setStyleSheet("color: #2c3e50; margin-left: 20px;")
        header_layout.addWidget(title)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        header_layout.addStretch()

        layout.addLayout(header_layout)

        reset_all_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
        reset_all_btn.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 8px 15px;
                    font-size: 12px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
        reset_all_btn.clicked.connect(self.reset_all_progress)
        header_layout.addWidget(reset_all_btn)

        layout.addLayout(header_layout)

    def reset_all_progress(self):
        """–°–±—Ä–æ—Å –≤—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        from ..data.progress_manager import progress_manager
        from PyQt6.QtWidgets import QMessageBox

        reply = QMessageBox.question(
            self,
            '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            progress_manager.reset_progress()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–∫–Ω–µ –∑–∞–¥–∞–Ω–∏–π
            if hasattr(self, 'tasks_window'):
                self.tasks_window.refresh_ui()

    def create_work_area(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        self.create_code_editor(splitter)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.create_visualization_area(splitter)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (40% –∫–æ–¥, 60% –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
        splitter.setSizes([400, 600])

        layout.addWidget(splitter)

    def create_code_editor(self, splitter):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞ —Å QScintilla"""
        code_widget = QWidget()
        code_layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        code_label = QLabel("–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞")
        code_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        code_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        code_layout.addWidget(code_label)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        self.code_editor = QsciScintilla()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–∫—Å–µ—Ä–∞ Python –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        lexer = QsciLexerPython()
        lexer.setDefaultFont(QFont("Courier New", 12))
        self.code_editor.setLexer(lexer)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        self.setup_editor_settings()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞
        example_code = """# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
x = 5
y = 10
result = x + y
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

numbers = [1, 2, 3]
for num in numbers:
    print(num)"""

        self.code_editor.setText(example_code)
        code_layout.addWidget(self.code_editor)

        code_widget.setLayout(code_layout)
        splitter.addWidget(code_widget)

    def setup_editor_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font = QFont("Courier New", 12)
        font.setFixedPitch(True)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∫ –ª–µ–∫—Å–µ—Ä—É
        lexer = self.code_editor.lexer()
        lexer.setFont(font)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        self.setup_autocompletion()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        self.code_editor.setIndentationsUseTabs(False)
        self.code_editor.setIndentationWidth(4)
        self.code_editor.setAutoIndent(True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        self.code_editor.setMarginType(0, QsciScintilla.MarginType.NumberMargin)
        self.code_editor.setMarginWidth(0, "0000")
        self.code_editor.setMarginLineNumbers(0, True)
        self.code_editor.setMarginsBackgroundColor(QColor("#f8f9fa"))
        self.code_editor.setMarginsForegroundColor(QColor("#7f8c8d"))

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        self.code_editor.setCaretLineVisible(True)
        self.code_editor.setCaretLineBackgroundColor(QColor("#ecf0f1"))

        # –°–∫–æ–±–∫–∏
        self.code_editor.setBraceMatching(QsciScintilla.BraceMatch.SloppyBraceMatch)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.code_editor.setSelectionBackgroundColor(QColor("#3498db"))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏
        self.code_editor.setTabWidth(4)

    def setup_autocompletion(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º API –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        lexer = self.code_editor.lexer()
        self.api = QsciAPIs(lexer)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ Python
        python_keywords = [
            'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
            'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',
            'return', 'try', 'while', 'with', 'yield', 'True', 'False', 'None'
        ]

        for keyword in python_keywords:
            self.api.add(keyword)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builtin_functions = [
            'abs', 'all', 'any', 'bin', 'bool', 'chr', 'dict', 'dir', 'enumerate', 'filter', 'float', 'format', 'hex',
            'int', 'isinstance', 'len', 'list', 'map', 'max', 'min', 'oct', 'ord', 'pow', 'print', 'range', 'repr',
            'reversed', 'round', 'set', 'sorted', 'str', 'sum', 'tuple', 'type', 'zip', 'hasattr', 'getattr', 'setattr',
            'super', 'input'
        ]

        for func in builtin_functions:
            self.api.add(func)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º API
        self.api.prepare()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.code_editor.setAutoCompletionSource(QsciScintilla.AutoCompletionSource.AcsAll)
        self.code_editor.setAutoCompletionThreshold(2)
        self.code_editor.setAutoCompletionCaseSensitivity(False)
        self.code_editor.setAutoCompletionUseSingle(QsciScintilla.AutoCompletionUseSingle.AcusNever)

    def create_visualization_area(self, splitter):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        viz_widget = QWidget()
        viz_layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        viz_label = QLabel("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        viz_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        viz_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        viz_layout.addWidget(viz_label)

        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.graphics_view = QGraphicsView(self.visualization_scene)
        self.graphics_view.setStyleSheet("""
            QGraphicsView {
                background-color: #ffffff;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
            }
        """)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.graphics_view.setRenderHint(QPainter.RenderHint.Antialiasing)
        self.graphics_view.setDragMode(QGraphicsView.DragMode.RubberBandDrag)
        self.graphics_view.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        self.graphics_view.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.graphics_view.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.graphics_view.setMinimumHeight(300)
        self.graphics_view.setMaximumHeight(400)

        viz_layout.addWidget(self.graphics_view)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–≤–æ–¥–∞
        output_label = QLabel("–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
        output_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        output_label.setStyleSheet("color: #2c3e50; margin-top: 10px; margin-bottom: 5px;")
        viz_layout.addWidget(output_label)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.output_text = QTextEdit()
        self.output_text.setMinimumHeight(100)
        self.output_text.setMaximumHeight(150)
        self.output_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                font-family: 'Courier New', monospace;
                font-size: 11px;
                border: 1px solid #34495e;
                border-radius: 5px;
                padding: 8px;
            }
        """)
        self.output_text.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—ã–≤–æ–¥ print()...")
        self.output_text.setReadOnly(True)
        viz_layout.addWidget(self.output_text)

        # –û–±–ª–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        self.create_task_description_area(viz_layout)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        self.create_test_results_area(viz_layout)

        viz_widget.setLayout(viz_layout)
        splitter.addWidget(viz_widget)

    def create_task_description_area(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        self.task_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        self.task_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.task_label.setStyleSheet("color: #2c3e50; margin-top: 10px; margin-bottom: 5px;")
        self.task_label.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addWidget(self.task_label)

        self.task_description = QTextEdit()
        self.task_description.setMaximumHeight(120)
        self.task_description.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 2px solid #e9ecef;
                border-radius: 5px;
                padding: 10px;
                font-family: Arial;
                font-size: 11px;
            }
        """)
        self.task_description.setReadOnly(True)
        self.task_description.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addWidget(self.task_description)

    def create_test_results_area(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        self.test_results_area = QTextEdit()
        self.test_results_area.setReadOnly(True)
        self.test_results_area.setMaximumHeight(150)
        self.test_results_area.setStyleSheet("""
            QTextEdit {
                border: 2px solid #dee2e6;
                border-radius: 5px;
                padding: 10px;
                font-family: 'Courier New', monospace;
                font-size: 10px;
            }
        """)
        self.test_results_area.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addWidget(self.test_results_area)

    def create_control_panel(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_layout = QHBoxLayout()
        control_layout.setContentsMargins(0, 10, 0, 0)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_style = """
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å–∫"
        self.run_btn = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫")
        self.run_btn.setStyleSheet(
            button_style.replace("#3498db", "#27ae60").replace("#2980b9", "#229954").replace("#21618c", "#1e8449"))
        self.run_btn.clicked.connect(self.run_code)
        control_layout.addWidget(self.run_btn)

        # –ö–Ω–æ–ø–∫–∞ "–®–∞–≥ –Ω–∞–∑–∞–¥"
        self.step_back_btn = QPushButton("‚¨ÖÔ∏è –®–∞–≥ –Ω–∞–∑–∞–¥")
        self.step_back_btn.setStyleSheet(button_style)
        self.step_back_btn.clicked.connect(self.step_back)
        self.step_back_btn.setEnabled(False)
        control_layout.addWidget(self.step_back_btn)

        # –ö–Ω–æ–ø–∫–∞ "–®–∞–≥ –≤–ø–µ—Ä–µ–¥"
        self.step_forward_btn = QPushButton("‚û°Ô∏è –®–∞–≥ –≤–ø–µ—Ä–µ–¥")
        self.step_forward_btn.setStyleSheet(button_style)
        self.step_forward_btn.clicked.connect(self.step_forward)
        self.step_forward_btn.setEnabled(False)
        control_layout.addWidget(self.step_forward_btn)

        # –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å"
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å")
        self.reset_btn.setStyleSheet(
            button_style.replace("#3498db", "#e74c3c").replace("#2980b9", "#c0392b").replace("#21618c", "#a93226"))
        self.reset_btn.clicked.connect(self.reset_execution)
        control_layout.addWidget(self.reset_btn)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
        self.test_button = QPushButton("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
        self.test_button.setStyleSheet(
            button_style.replace("#3498db", "#28a745").replace("#2980b9", "#218838").replace("#21618c", "#1e7e34"))
        self.test_button.clicked.connect(self.run_tests)
        control_layout.addWidget(self.test_button)

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_png_btn = QPushButton("üì∑ PNG")
        self.export_png_btn.setStyleSheet(button_style.replace("#3498db", "#9b59b6"))
        self.export_png_btn.clicked.connect(self.export_to_png)
        control_layout.addWidget(self.export_png_btn)

        self.export_svg_btn = QPushButton("üé® SVG")
        self.export_svg_btn.setStyleSheet(button_style.replace("#3498db", "#8e44ad"))
        self.export_svg_btn.clicked.connect(self.export_to_svg)
        control_layout.addWidget(self.export_svg_btn)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        control_layout.addStretch()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        self.line_indicator = QLabel("–°—Ç—Ä–æ–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        self.line_indicator.setStyleSheet("color: #7f8c8d; font-size: 12px;")
        control_layout.addWidget(self.line_indicator)

        layout.addLayout(control_layout)

    def set_task_description(self, theme: str, task_name: str, description: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.current_theme = theme
        self.current_task_name = task_name

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.test_results_area.hide()
        self.test_results_area.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        self.task_label.show()
        self.task_description.show()

        task_text = f"""<h3>{task_name}</h3>
    <p><strong>–¢–µ–º–∞:</strong> {theme}</p>
    <p>{description}</p>
    <p>üí° <em>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!</em></p>"""

        self.task_description.setHtml(task_text)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏
        self.load_task_tests(theme, task_name)

    def load_task_tests(self, theme: str, task_name: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ—Å—Ç–∞–º–∏
            tests_file = os.path.join(os.path.dirname(__file__), '..', 'data', 'tasks_tests.json')

            if not os.path.exists(tests_file):
                print(f"–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {tests_file}")
                self.current_task_tests = []
                self.test_button.setText("üß™ –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            with open(tests_file, 'r', encoding='utf-8') as f:
                tests_data = json.load(f)

            if theme in tests_data and task_name in tests_data[theme]:
                task_data = tests_data[theme][task_name]
                self.current_task_tests = [
                    TestCase(
                        inputs=test['inputs'],
                        expected_output=test['expected_output'],
                        description=test['description']
                    )
                    for test in task_data['test_cases']
                ]
                self.test_button.setText(f"üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ ({len(self.current_task_tests)} —Ç–µ—Å—Ç–æ–≤)")
            else:
                self.current_task_tests = []
                self.test_button.setText("üß™ –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            self.current_task_tests = []
            self.test_button.setText("üß™ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤")

    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞"""
        if not self.current_task_tests:
            self.test_results_area.setText("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏")
            self.test_results_area.show()
            return

        code = self.code_editor.text()
        if not code.strip():
            self.test_results_area.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            self.test_results_area.show()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        print("DEBUG: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        results = self.test_runner.run_tests(code, self.current_task_tests)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.display_test_results(results)

    def display_test_results(self, results: dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.test_results_area.show()

        if results['success']:
            header = f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ({results['passed']}/{results['total']})"
            self.test_results_area.setStyleSheet("""
                QTextEdit {
                    background-color: #d4edda;
                    color: #155724;
                    border: 2px solid #c3e6cb;
                    border-radius: 5px;
                    padding: 10px;
                    font-family: 'Courier New', monospace;
                    font-size: 10px;
                }
            """)
        else:
            header = f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã ({results['passed']}/{results['total']})"
            self.test_results_area.setStyleSheet("""
                QTextEdit {
                    background-color: #f8d7da;
                    color: #721c24;
                    border: 2px solid #f5c6cb;
                    border-radius: 5px;
                    padding: 10px;
                    font-family: 'Courier New', monospace;
                    font-size: 10px;
                }
            """)

        output = [header, "=" * 60]

        for result in results['test_results']:
            test_num = result['test_number']
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result['passed'] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"

            output.append(f"\n–¢–µ—Å—Ç {test_num}: {status}")
            if result['description']:
                output.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}")

            output.append(f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result['input']}")
            output.append(f"–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: '{result['expected_output']}'")
            output.append(f"–í–∞—à –≤—ã–≤–æ–¥: '{result['actual_output']}'")

            if result.get('error'):
                output.append(f"–û—à–∏–±–∫–∞: {result['error']}")

        self.test_results_area.setText('\n'.join(output))

    def back_to_menu(self):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        # –°–∫—Ä—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
        self.task_label.hide()
        self.task_description.hide()
        self.test_results_area.hide()

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        if hasattr(self, 'current_theme'):
            delattr(self, 'current_theme')
        if hasattr(self, 'current_task_name'):
            delattr(self, 'current_task_name')

        self.main_window.show_menu()

    def run_code(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–¥–∞"""
        code = self.code_editor.text()
        if not code.strip():
            self.line_indicator.setText("–û—à–∏–±–∫–∞: –ö–æ–¥ –ø—É—Å—Ç–æ–π")
            return

        self.output_text.clear()

        try:
            success = self.executor.execute_step_by_step(code)
            if success:
                self.current_step_number = 0
                self.update_visualization()
                self.step_forward_btn.setEnabled(True)
                self.step_back_btn.setEnabled(False)
                self.line_indicator.setText(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ. –®–∞–≥–æ–≤: {len(self.executor.steps)}")
            else:
                self.line_indicator.setText("–û—à–∏–±–∫–∞: –ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        except Exception as e:
            self.line_indicator.setText(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")

    def step_back(self):
        """–®–∞–≥ –Ω–∞–∑–∞–¥"""
        if self.current_step_number > 0:
            self.current_step_number -= 1
            self.update_visualization()
            self.step_forward_btn.setEnabled(True)
            if self.current_step_number <= 0:
                self.step_back_btn.setEnabled(False)
        else:
            self.line_indicator.setText("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def step_forward(self):
        """–®–∞–≥ –≤–ø–µ—Ä–µ–¥"""
        if self.current_step_number < len(self.executor.steps) - 1:
            self.current_step_number += 1
            self.update_visualization()
            self.step_back_btn.setEnabled(True)
            if self.current_step_number >= len(self.executor.steps) - 1:
                self.step_forward_btn.setEnabled(False)
        else:
            self.line_indicator.setText("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def reset_execution(self):
        """–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.executor.reset()
        self.current_step_number = -1
        self.step_forward_btn.setEnabled(False)
        self.step_back_btn.setEnabled(False)
        self.visualization_scene.clear_all()
        self.line_indicator.setText("–°—Ç—Ä–æ–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        self.output_text.clear()
        self.code_editor.clearIndicatorRange(0, 0, self.code_editor.lines(), 0, 0)

    def update_visualization(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        if self.current_step_number < 0 or self.current_step_number >= len(self.executor.steps):
            return

        step = self.executor.steps[self.current_step_number]

        print(f"DEBUG: –®–∞–≥ {self.current_step_number}, —Å—Ç—Ä–æ–∫–∞ {step.line_number}, –∫–æ–¥: {step.code_line}")
        print(f"DEBUG: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {step.variables}")

        self.line_indicator.setText(
            f"–°—Ç—Ä–æ–∫–∞: {step.line_number} | –®–∞–≥: {step.step_number + 1}/{len(self.executor.steps)}")

        self.highlight_current_line(step.line_number)
        self.update_variables_display(step.variables)
        self.update_output_display()

        if step.error:
            self.line_indicator.setText(f"–û–®–ò–ë–ö–ê –≤ —Å—Ç—Ä–æ–∫–µ {step.line_number}: {step.error}")

    def update_output_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –≤—ã–≤–æ–¥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        output_text = ""
        for i in range(self.current_step_number + 1):
            if i < len(self.executor.steps):
                step = self.executor.steps[i]
                if step.output:
                    output_text += step.output + "\n"

        self.output_text.setPlainText(output_text.rstrip())
        cursor = self.output_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.output_text.setTextCursor(cursor)

    def highlight_current_line(self, line_number: int):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        self.code_editor.clearIndicatorRange(0, 0, self.code_editor.lines(), 0, 0)
        if line_number > 0:
            self.code_editor.setCursorPosition(line_number - 1, 0)
            self.code_editor.setSelection(line_number - 1, 0, line_number - 1,
                                          len(self.code_editor.text(line_number - 1)))

    def update_variables_display(self, variables: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not variables:
            self.visualization_scene.clear_all()
            return

        self.visualization_scene.update_visualization(variables)

        items_rect = self.visualization_scene.itemsBoundingRect()
        if not items_rect.isEmpty():
            margin = 50
            expanded_rect = items_rect.adjusted(-margin, -margin, margin, margin)
            self.visualization_scene.setSceneRect(expanded_rect)
            self.graphics_view.fitInView(expanded_rect, Qt.AspectRatioMode.KeepAspectRatio)
        else:
            self.visualization_scene.setSceneRect(0, 0, 800, 600)
            self.graphics_view.fitInView(0, 0, 800, 600, Qt.AspectRatioMode.KeepAspectRatio)

    def export_to_png(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ PNG"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PNG", "visualization.png", "PNG —Ñ–∞–π–ª—ã (*.png);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if file_path:
            try:
                scene_rect = self.visualization_scene.itemsBoundingRect()
                if scene_rect.isEmpty():
                    scene_rect = QRectF(0, 0, 800, 600)

                pixmap = QPixmap(int(scene_rect.width() + 100), int(scene_rect.height() + 100))
                pixmap.fill()
                painter = QPainter(pixmap)
                painter.setRenderHint(QPainter.RenderHint.Antialiasing)
                self.visualization_scene.render(painter, QRectF(50, 50, scene_rect.width(), scene_rect.height()),
                                                scene_rect)
                painter.end()

                pixmap.save(file_path, "PNG")
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:\n{file_path}")
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG:\n{str(e)}")

    def export_to_svg(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ SVG"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ SVG", "visualization.svg", "SVG —Ñ–∞–π–ª—ã (*.svg);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if file_path:
            try:
                scene_rect = self.visualization_scene.itemsBoundingRect()
                if scene_rect.isEmpty():
                    scene_rect = QRectF(0, 0, 800, 600)

                svg_generator = QSvgGenerator()
                svg_generator.setFileName(file_path)
                svg_generator.setSize(QSize(int(scene_rect.width() + 100), int(scene_rect.height() + 100)))
                svg_generator.setViewBox(QRectF(0, 0, scene_rect.width() + 100, scene_rect.height() + 100))
                svg_generator.setTitle("Python Code Visualization")
                svg_generator.setDescription("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ Python")

                painter = QPainter(svg_generator)
                painter.setRenderHint(QPainter.RenderHint.Antialiasing)
                self.visualization_scene.render(painter, QRectF(50, 50, scene_rect.width(), scene_rect.height()),
                                                scene_rect)
                painter.end()

                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:\n{file_path}")
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG:\n{str(e)}")
